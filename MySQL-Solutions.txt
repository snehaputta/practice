1. Basic Query with LIMIT: Retrieve the first 5 employees by highest salary.
Hint: Use LIMIT

Select * from employees order by salary desc limit 5;

2. OFFSET with Sorting: Retrieve the 5 employees with the lowest salary, skipping the first 10 records.
Hint: Combine ORDER BY with LIMIT and OFFSET

Select * from employees order by salary asc limit 5 OFFSET 10;

3. Aggregate with HAVING: Display each department's total salary, but only show departments where the total salary exceeds $30,000.
Hint: Use GROUP BY and HAVING
.

1. Employee(eid,enames,e.salary,deptId)
2. Department(id,name)

Select d.department_id, d.department_name,sum(e.salary) as Salary   from employees e
 join departments d on e.department_id=d.department_id 
 group by d.department_id
 having sum(e.salary) > 30000;


4. Conditional Logic (CASE Statement)
For each employee, display their salary and a note if it is above or below $7000.
Hint: Use the CASE statement.

Select employee_id,Concat(first_name,' ',last_name) as fullName, salary,
 CASE 
 when salary > 7000 then "Above 7000 Salary"
 when salary < 7000 then "Below 7000 Salary"
 ELSE "Exactly 7000 Salary"
 end as salary_note
 from employees; 


5.Date Functions:List the projects that started in the last 6 months.
Hint: Use CURDATE() and DATE_SUB().

 Select project_name, start_date,end_date from projects where start_date >= date_sub(curdate(),Interval 6 month);


6. RIGHT JOIN with Null Handling: Display all projects, including those with no employees assigned.
Hint: Use RIGHT JOIN.

SELECT  ep.employee_id,ep.project_id
FROM employeeprojects ep
RIGHT JOIN employees e ON ep.employee_id=e.employee_id;


7. Update Query with a Condition: Increase the salary of all employees in the 'Finance' department by 12%.
Hint: Use UPDATE.


UPDATE employees SET salary = salary * 1.12 where department_id=3;


8. String Functions: Retrieve the first and last names of employees whose last names start with 'S'.
Hint: Use LIKE.

Select e.first_name,e.last_name from employees e where e.last_name like 's%';


9. Aggregation with COUNT: Count the number of employees assigned to each department.
Hint: Use COUNT and GROUP BY.

Select count(employee_id), department_id from employees group by department_id;


10.JOIN and Aggregation: Find the total number of hours worked by employees on each project.
Hint: Use JOIN and SUM.

Select p.project_id, p.project_name, SUM(ep.hours_worked) AS total_hours FROM projects p LEFT JOIN employeeprojects ep ON p.project_id = ep.project_id
group by p.project_id, p.project_name;


11.Subquery with Aggregation: Select the employees who earn more than the average salary.
Hint: Use a subquery to find the average salary.

Select * from employees where salary > (Select AVG(salary) from employees);


12. Date Formatting: Display each project's start date in the format 'Month Day, Year' (e.g., January 01, 2024).
Hint: Use DATE_FORMAT()

select project_id, project_name, DATE_FORMAT(start_date, '%M %d, %Y') AS Date from projects;

13. Multiple Joins: List all employees, their department names, and the projects they have worked on.
Hint: Use multiple JOIN clauses.

Select e.employee_id, e.first_name, e.last_name, d.department_name, p.project_name
from employees e
JOIN departments d ON e.department_id = d.department_id
LEFT JOIN employeeprojects ep ON e.employee_id = ep.employee_id
LEFT JOIN projects p ON ep.project_id = p.project_id;


14. Using RIGHT JOIN and CASE: List all projects, showing 'Assigned' if any employees are assigned and 'Unassigned' otherwise.
Hint: Use RIGHT JOIN with CASE.

SELECT p.project_id,p.project_name,
       CASE 
           WHEN Count(ep.employee_id) > 0  THEN 'Assigned'
           ELSE 'Unassigned'
       END AS assignment_status
FROM projects p RIGHT JOIN employeeprojects ep ON p.project_id = ep.project_id group by p.project_id,p.project_name;
 

15. Aggregation with Conditions: Find the average salary of employees in each department, but only show departments where more than 5 employees work.
Hint: Use GROUP BY with HAVING.

Select d.department_id, d.department_name, AVG(e.salary) AS average_salary FROM departments d join employees e ON d.department_id = e.department_id
group by d.department_id, d.department_name having COUNT(e.employee_id) > 5;
