1. Basic Query with LIMIT: Retrieve the first 5 employees by highest salary.
Hint: Use LIMIT

Select * from employees order by salary desc limit 5;

2. OFFSET with Sorting: Retrieve the 5 employees with the lowest salary, skipping the first 10 records.
Hint: Combine ORDER BY with LIMIT and OFFSET

Select * from employees order by salary asc limit 5 OFFSET 10;

3. Aggregate with HAVING: Display each department's total salary, but only show departments where the total salary exceeds $30,000.
Hint: Use GROUP BY and HAVING
.

1. Employee(eid,enames,e.salary,deptId)
2. Department(id,name)

Select d.department_id, d.department_name,sum(e.salary) as Salary   from employees e
 join departments d on e.department_id=d.department_id 
 group by d.department_id
 having sum(e.salary) > 30000;


4. Conditional Logic (CASE Statement)
For each employee, display their salary and a note if it is above or below $7000.
Hint: Use the CASE statement.

Select employee_id,Concat(first_name,' ',last_name) as fullName, salary,
 CASE 
 when salary > 7000 then "Above 7000 Salary"
 when salary < 7000 then "Below 7000 Salary"
 ELSE "Exactly 7000 Salary"
 end as salary_note
 from employees; 


5.Date Functions:List the projects that started in the last 6 months.
Hint: Use CURDATE() and DATE_SUB().

 Select project_name, start_date,end_date from projects where start_date >= date_sub(curdate(),Interval 6 month);


6. RIGHT JOIN with Null Handling: Display all projects, including those with no employees assigned.
Hint: Use RIGHT JOIN.

SELECT  ep.employee_id,ep.project_id
FROM employeeprojects ep
RIGHT JOIN employees e ON ep.employee_id=e.employee_id;


7. Update Query with a Condition: Increase the salary of all employees in the 'Finance' department by 12%.
Hint: Use UPDATE.


UPDATE employees SET salary = salary * 1.12 where department_id=3;


8. String Functions: Retrieve the first and last names of employees whose last names start with 'S'.
Hint: Use LIKE.

Select e.first_name,e.last_name from employees e where e.last_name like 's%';


9. Aggregation with COUNT: Count the number of employees assigned to each department.
Hint: Use COUNT and GROUP BY.

Select count(employee_id), department_id from employees group by department_id;


10.JOIN and Aggregation: Find the total number of hours worked by employees on each project.
Hint: Use JOIN and SUM.

Select p.project_id, p.project_name, SUM(ep.hours_worked) AS total_hours FROM projects p LEFT JOIN employeeprojects ep ON p.project_id = ep.project_id
group by p.project_id, p.project_name;


11.Subquery with Aggregation: Select the employees who earn more than the average salary.
Hint: Use a subquery to find the average salary.

Select * from employees where salary > (Select AVG(salary) from employees);


12. Date Formatting: Display each project's start date in the format 'Month Day, Year' (e.g., January 01, 2024).
Hint: Use DATE_FORMAT()

select project_id, project_name, DATE_FORMAT(start_date, '%M %d, %Y') AS Date from projects;

13. Multiple Joins: List all employees, their department names, and the projects they have worked on.
Hint: Use multiple JOIN clauses.

Select e.employee_id, e.first_name, e.last_name, d.department_name, p.project_name
from employees e
JOIN departments d ON e.department_id = d.department_id
LEFT JOIN employeeprojects ep ON e.employee_id = ep.employee_id
LEFT JOIN projects p ON ep.project_id = p.project_id;


14. Using RIGHT JOIN and CASE: List all projects, showing 'Assigned' if any employees are assigned and 'Unassigned' otherwise.
Hint: Use RIGHT JOIN with CASE.

SELECT p.project_id,p.project_name,
       CASE 
           WHEN Count(ep.employee_id) > 0  THEN 'Assigned'
           ELSE 'Unassigned'
       END AS assignment_status
FROM projects p RIGHT JOIN employeeprojects ep ON p.project_id = ep.project_id group by p.project_id,p.project_name;
 

15. Aggregation with Conditions: Find the average salary of employees in each department, but only show departments where more than 5 employees work.
Hint: Use GROUP BY with HAVING.

Select d.department_id, d.department_name, AVG(e.salary) AS average_salary FROM departments d join employees e ON d.department_id = e.department_id
group by d.department_id, d.department_name having COUNT(e.employee_id) > 5;

meetings notes: (12-12-2024)
===============

interview SQL questions on accounts receivable

generate CSV file with at least 100 to 200 rows of employee data
generate text file with at least 100 to 200 rows of employee data
example: 
name email department salary highest-qualification phone


1) In Employees_Projects table some rows reference employees who no longer exist in the employees table. Remove these orphaned rows

DELETE FROM Employees_Projects
WHERE employee_id NOT IN (SELECT employee_id FROM Employees);

2) Detect Salary gaps

hint: you want to compare the average salary between departments.

SELECT department_id, 
       AVG(salary) AS avg_salary,
       (AVG(salary) - (SELECT AVG(salary) FROM Employees)) AS salary_gap
FROM Employees
GROUP BY department_id
ORDER BY salary_gap DESC;

SELECT department_id, 
       AVG(salary) AS avg_salary,
       (AVG(salary) - (SELECT AVG(salary) FROM Employees)) AS salary_gap
FROM Employees
GROUP BY department_id
HAVING ABS(AVG(salary) - (SELECT AVG(salary) FROM Employees)) > 5000
ORDER BY salary_gap DESC;

3) Employees working on more than 1 project

SELECT employee_id, COUNT(DISTINCT project_id) AS project_count
FROM Employees_Projects
GROUP BY employee_id
HAVING COUNT(DISTINCT project_id) > 1;

-- with primary key
delete from orders where order_id not in (select min(order_id) from orders group by cust_id, order_date);

Order table - ordered custid custdate (custid and custdate should be only once no duplicates)

orderid, custid custdate - query to delete duplicates

create TEMPORARY TABLE duplicates AS(select employee_id,project_id from employees_projects
group by employee_id,project_id
having count(*)>1);
 
select employee_id,project_id from duplicates;
 
DELETE FROM employees_projects
WHERE (employee_id,project_id) In (select employee_id,project_id from duplicates);
 
start TRANSACTION;
 
-- emp_proj_backup_11-12-2024
create table temp_ep(project_id int, employee_id int);
 
-- with temp_ep_cte as (
  insert into temp_ep(project_id, employee_id)
  select project_id, employee_id from (
    select *, row_number() over(partition by project_id, employee_id) as row_num
    from employees_projects
    group by project_id, employee_id) as subquery
  where row_num = 1;
-- )
 
-- select * from temp_ep;
 
delete from employees_projects;
 
insert into employees_projects (project_id, employee_id)
select project_id, employee_id from temp_ep;

--truncate the temp_table

commit;

-- delete from employees_projects
 
Please check code into git
 
Create TEMPORARY TABLE employees_projects_temp
AS SELECT min(id),project_id, employee_id
    FROM employees_projects
    GROUP BY project_id, employee_id
    HAVING COUNT(*) > 1;
 
 
    Delete from employees_projects;
 
 
    Insert into employees_projects (id,project_id,employee_id)
    Select id,project_id,employee_id from employees_projects_temp;

use count with group by for finding duplicates

employees_projects is a table with project_id and employee_id

select employee_id, count(*) from employees_projects group by employee_id having count(*)>1;

employees and projects many to many relationship. 

select e.id, e.first_name, e.last_name, p.id from employees e LEFT JOIN projects p where e.id in p group by e.id; 

select e.id,e.first_name,e.last_name,p.id as project_id,
 p.title as project_title from employees e join employees_projects
ep on e.id=ep.employee_id join projects p on ep.project_id=p.id;

left join needs to be applied because it will handle the edge cases where an employee will not have any assigned projects